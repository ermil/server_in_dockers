#+TITLE:   Mon serveur avec des dockers le plus générique possible

J'ai plusieurs de mes proches qui avaient besoin de sites web. Je les ai donc aidé en m'occupant de mettre en place l'infrastructure nécessaire sur le serveur. Comme ils ont des projets distincts, j'ai voulu rendre le plus générique possible l'architecture pour que ce soit facile pour moi à maintenir et pouvoir réutiliser les même dockers pour les même services. Ce répertoire est donc un exemple de mon architecture avec les différents dockers que j'ai développé jusqu'à maintenant. 
- Traefik :: qui permet d'acheminer les requêtes http et https vers les différents sites web.
- Fail2Ban :: qui permet de sécuriser l'accès au serveur.
- Wordpress :: pour faire des sites web.
Chacun de ces services se configure avec un fichier d'environnement(~.env~) pour changer quelques réglages spécifiques. Plus de détails dans les différents projets spécifiques. 

* Usages 
** makefile
Le makefile est pratique puisqu'il permet de transmettres les différentes actions à tous les sous-répertoires. Je peux donc démarrer, mettre à jour ou encore faire une sauvegarde de l'ensemble de mes services avec un simple 
#+begin_src 
make <action>
#+end_src
Où les différentes actions correspondent à 
- init :: Création du network et démarrage du daemon docker si nécessaire. 
- up :: démarrage ou redémarrage des dockers.
- stop :: Arrêt des dockers, sans les retirer.
- down :: Arrêt des dockers et retrait des contenuers, réseaux, volumes et images créees par up.
- update :: télécharge une nouvelle image des différents services si disponible.
- backup :: Fait une archive avec les différents fichiers nécessaires pour retrouver l'état actuel du conteneur.
** Initialisation des submodules
Lors d'un clone, pour initialiser les submodules, il faut charger les submodules.
#+begin_src 
git submodule init
git submodule update
#+end_src

** Flow git
Afin de partager mes projets et pouvoir les réutiliser pour différents serveurs, je partage qu'une version générique. Afin de la maintenir à jour à partir de ma configuration spécifique que j'utilise sur mon serveur, je définis un /merge driver/ qui permet de toujours conserver la version de la branche d'un fichier. Je définis donc des configurations génériques sur une branche et mes configurations spécifiques sur les branches de développement et production. Le ficher [[.gitattributes]] permet de définir chacun des fichiers qui doivent utiliser ce /merge driver/ de manière à ce que chaque branche ait ses versions spécifiques des fichiers. La commande suivante crée le /merge driver/ au niveau du projet ou dans la configuration du système avec l'option --global.
#+begin_src
git config [--global] merge.ours.driver true
#+end_src
Pour plus de détails pour que cela fonctionne bien, voir [[https://github.com/ermil/gitflow#public-repo-without-personal-information][mon flow git]].
